// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/rebost/state (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	state "github.com/xescugc/rebost/state"
)

// StateRepository is a mock of Repository interface.
type StateRepository struct {
	ctrl     *gomock.Controller
	recorder *StateRepositoryMockRecorder
}

// StateRepositoryMockRecorder is the mock recorder for StateRepository.
type StateRepositoryMockRecorder struct {
	mock *StateRepository
}

// NewStateRepository creates a new mock instance.
func NewStateRepository(ctrl *gomock.Controller) *StateRepository {
	mock := &StateRepository{ctrl: ctrl}
	mock.recorder = &StateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *StateRepository) EXPECT() *StateRepositoryMockRecorder {
	return m.recorder
}

// DeleteAll mocks base method.
func (m *StateRepository) DeleteAll(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *StateRepositoryMockRecorder) DeleteAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*StateRepository)(nil).DeleteAll), arg0)
}

// Find mocks base method.
func (m *StateRepository) Find(arg0 context.Context) (*state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *StateRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*StateRepository)(nil).Find), arg0)
}

// Update mocks base method.
func (m *StateRepository) Update(arg0 context.Context, arg1 *state.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *StateRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*StateRepository)(nil).Update), arg0, arg1)
}
