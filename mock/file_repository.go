// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/rebost/file (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	file "github.com/xescugc/rebost/file"
)

// FileRepository is a mock of Repository interface.
type FileRepository struct {
	ctrl     *gomock.Controller
	recorder *FileRepositoryMockRecorder
}

// FileRepositoryMockRecorder is the mock recorder for FileRepository.
type FileRepositoryMockRecorder struct {
	mock *FileRepository
}

// NewFileRepository creates a new mock instance.
func NewFileRepository(ctrl *gomock.Controller) *FileRepository {
	mock := &FileRepository{ctrl: ctrl}
	mock.recorder = &FileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FileRepository) EXPECT() *FileRepositoryMockRecorder {
	return m.recorder
}

// CreateOrReplace mocks base method.
func (m *FileRepository) CreateOrReplace(arg0 context.Context, arg1 *file.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrReplace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrReplace indicates an expected call of CreateOrReplace.
func (mr *FileRepositoryMockRecorder) CreateOrReplace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrReplace", reflect.TypeOf((*FileRepository)(nil).CreateOrReplace), arg0, arg1)
}

// DeleteAll mocks base method.
func (m *FileRepository) DeleteAll(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *FileRepositoryMockRecorder) DeleteAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*FileRepository)(nil).DeleteAll), arg0)
}

// DeleteBySignature mocks base method.
func (m *FileRepository) DeleteBySignature(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBySignature", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBySignature indicates an expected call of DeleteBySignature.
func (mr *FileRepositoryMockRecorder) DeleteBySignature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBySignature", reflect.TypeOf((*FileRepository)(nil).DeleteBySignature), arg0, arg1)
}

// FindBySignature mocks base method.
func (m *FileRepository) FindBySignature(arg0 context.Context, arg1 string) (*file.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySignature", arg0, arg1)
	ret0, _ := ret[0].(*file.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySignature indicates an expected call of FindBySignature.
func (mr *FileRepositoryMockRecorder) FindBySignature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySignature", reflect.TypeOf((*FileRepository)(nil).FindBySignature), arg0, arg1)
}
